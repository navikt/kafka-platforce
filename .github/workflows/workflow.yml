name: Build, push, and deploy

on:
  workflow_call:
    inputs:
      DEPLOY_APP:
        required: true
        type: string
      DEPLOY_CLUSTER:
        required: true
        type: string
      FLAG_SEEK:
        required: true
        type: boolean
      SEEK_OFFSET:
        required: true
        type: string
      NUMBER_OF_SAMPLES:
        required: true
        type: string
      FLAG_NO_POST:
        required: true
        type: boolean
      FLAG_ALT_ID:
        required: true
        type: boolean
jobs:
  test:
    name: >- # Displays inputs as name on job
      Tests ${{ inputs.DEPLOY_APP }} - ${{ inputs.DEPLOY_CLUSTER }}
      ${{ inputs.FLAG_SEEK && format(' - SEEK {0}', inputs.SEEK_OFFSET) || '' }}
      ${{ inputs.NUMBER_OF_SAMPLES != '0' && format(' - SAMPLE {0}', inputs.NUMBER_OF_SAMPLES) || '' }}
      ${{ inputs.FLAG_NO_POST && ' - NO_POST' || '' }}
      ${{ inputs.FLAG_ALT_ID && ' - ALT_ID' || '' }}
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
      - name: Build and run tests
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew test
  build:
    name: Build and push Docker container
    needs: test
    if: github.event_name != 'pull_request'
    runs-on: ubuntu-latest
    permissions:
      contents: write
      id-token: write
    outputs:
      image: ${{ steps.docker-push.outputs.image }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          java-version: 21
          distribution: temurin
      - name: Setup Gradle to generate and submit dependency graphs
        uses: gradle/actions/setup-gradle@v3
        with:
          dependency-graph: generate-and-submit
      - name: Build JAR
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew clean build shadowJar -x test
      - name: Build and publish Docker image
        uses: nais/docker-build-push@v0
        id: docker-push
        with:
          team: teamnks
          identity_provider: ${{ secrets.NAIS_WORKLOAD_IDENTITY_PROVIDER }}
          project_id: ${{ vars.NAIS_MANAGEMENT_PROJECT_ID }}
      - name: Create image URL artifact
        run: echo "${{ steps.docker-push.outputs.image }}" > ./imageUrl.txt
      - uses: actions/upload-artifact@v4
        with:
          name: imageUrl
          path: ./imageUrl.txt
  setup-matrix:
    name: Set up matrix for deployment
    needs: test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set up matrix
        id: set-matrix
        run: |
          if [ "${{ inputs.DEPLOY_APP }}" == "ALL" ]; then
            apps=$(find ./.nais -name "${{ inputs.DEPLOY_CLUSTER }}.yaml" -not -path "*/default/*" -exec dirname {} \; | xargs -n 1 basename)
            matrix_config=$(printf '%s\n' "$apps" | jq -R -s -c 'split("\n")[:-1] | map({app: .})')
          else
            matrix_config=$(printf '%s\n' "${{ inputs.DEPLOY_APP }}" | jq -R -s -c 'split("\n")[:-1] | map({app: .})')
          fi
          echo "Matrix config ${matrix_config}"
          echo "matrix=$matrix_config" >> $GITHUB_OUTPUT
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
  deploy:
    name: Deploy ${{ matrix.target.app }} to ${{ inputs.DEPLOY_CLUSTER }}
    needs: [ build, setup-matrix ]
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
    strategy:
      matrix:
        target: ${{ fromJson(needs.setup-matrix.outputs.matrix) }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Merge YAML
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: ./gradlew mergeYamlTask
      - name: Deploy ${{ matrix.target.app }} to ${{ inputs.DEPLOY_CLUSTER }}
        uses: nais/deploy/actions/deploy@v2
        env:
          CLUSTER: ${{ inputs.DEPLOY_CLUSTER }}
          RESOURCE: .nais/${{ matrix.target.app }}/target/${{ inputs.DEPLOY_CLUSTER }}.yaml
          VAR: image=${{ needs.build.outputs.image }},DEPLOY_APP=${{ matrix.target.app }},DEPLOY_CLUSTER=${{ inputs.DEPLOY_CLUSTER }},NUMBER_OF_SAMPLES=${{ inputs.NUMBER_OF_SAMPLES }},FLAG_SEEK=${{ inputs.FLAG_SEEK }},SEEK_OFFSET=${{ inputs.SEEK_OFFSET }},FLAG_NO_POST=${{ inputs.FLAG_NO_POST }},FLAG_ALT_ID=${{ inputs.FLAG_ALT_ID }}